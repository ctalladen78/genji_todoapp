// Code generated by genji.
// DO NOT EDIT!

package store

import (
	"errors"

	"github.com/asdine/genji/field"
	"github.com/asdine/genji/query"
	"github.com/asdine/genji/record"
)

// GetField implements the field method of the record.Record interface.
func (u *User) GetField(name string) (field.Field, error) {
	switch name {
	case "ID":
		return field.NewString("ID", u.ID), nil
	case "Status":
		return field.NewBytes("Status", u.Status), nil
	case "Name":
		return field.NewBytes("Name", u.Name), nil
	}

	return field.Field{}, errors.New("unknown field")
}

// Iterate through all the fields one by one and pass each of them to the given function.
// It the given function returns an error, the iteration is interrupted.
func (u *User) Iterate(fn func(field.Field) error) error {
	var err error

	err = fn(field.NewString("ID", u.ID))
	if err != nil {
		return err
	}

	err = fn(field.NewBytes("Status", u.Status))
	if err != nil {
		return err
	}

	err = fn(field.NewBytes("Name", u.Name))
	if err != nil {
		return err
	}

	return nil
}

// ScanRecord extracts fields from record and assigns them to the struct fields.
// It implements the record.Scanner interface.
func (u *User) ScanRecord(rec record.Record) error {
	return rec.Iterate(func(f field.Field) error {
		var err error

		switch f.Name {
		case "ID":
			u.ID, err = field.DecodeString(f.Data)
		case "Status":
			u.Status, err = field.DecodeBytes(f.Data)
		case "Name":
			u.Name, err = field.DecodeBytes(f.Data)
		}
		return err
	})
}

// UserFields describes the fields of the User record.
// It can be used to select fields during queries.
type UserFields struct {
	ID     query.StringFieldSelector
	Status query.BytesFieldSelector
	Name   query.BytesFieldSelector
}

// NewUserFields creates a UserFields.
func NewUserFields() *UserFields {
	return &UserFields{
		ID:     query.StringField("ID"),
		Status: query.BytesField("Status"),
		Name:   query.BytesField("Name"),
	}
}
